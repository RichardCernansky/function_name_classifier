\subsection{What are the possibilities for extracting information from an AST?}
There are 4 kinds of features that could be extracted from AST:
\begin{itemize}
    \item Structural
    Structural features capture the structural complexity of AST. These are often some numerical quantitave	values like depth of the graph, number of nodes or average branching factor of internal nodes. 
    \item Semantic
		Semantic features 
		Sematic features reflect the semantic information encoded in AST. It could be as simple as distribution of node kinds (that are defined by the compiler that creates the AST) or distibution of distinct root-to-leaf paths. 
    \item Syntactic
		Syntactic features describe the paradigm in which the source code is written and the logical complexity of the program. These might include number of 
		functions or functor structures, or the number of the control flow units.
    \item Combined
		These kinds of features are use case specific and it is up to the data analyst to design his best fit solution for information extraction using the combinations and alternations of aforementioned strategies. Combined features are also the ones that are usually used when tackling real world problems like source code authorship attribution or function name classification.   
\end{itemize} #find references

\subsection{How do We utilize the information stored in a function's AST?}
The problem of function name classification requires such information extraction design to capture all three of the structural, semantic and syntactic features in a number vector that could be somehow fed into a neural network classifier. Code2vec \cite{code2vec} proposes solution design that extracts so called 'path-contexts' which are encoded into vector space using the embedding values of its components. Let's see the following definitions. 

\begin{definition}
\cite{2001.pdf}
\textbf{Path context in AST}
Path context is a triplet consisting of path between two leaves in a tree and the starting node's data (token value) and the ending node's data structured like this: <start_node.data, path_arr, end_node.data>. So essentially what path context represents is the connected leaf nodes and the path that connects them.
\end{definition}

\begin{definition}
\textbf{Path in AST}
Path is a sequence of connected nodes, specifically, what interests us is the sequence of types (kinds) of the AST internal nodes between two distinct (for our purposes leaf but can be any two nodes) nodes. 
\end{definition}

\textbf{Example of path context}
Below is an example of path context between node with data `a` and BasicTypeSpecifier node `int` derived from the AST that we constructed earlier in the example.

<a, (AddExpresssion, ReturnStatement, CompoundStatement, FunctionDefinition, FunctionDeclarator, ParameterSuffix, Parameter)
