 
 
 int main( int argc, char *argv[] )
 {
 	FILE	*fp;
 	int		numCases, num, i;
 	char	buffer[MAXCHAR], param1[MAXCHAR], param2[MAXCHAR];
     long    min;
 
 	if( argc < 2 )
 	{
 		fprintf( stderr, "Error : No input file!\n" );
 		fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
 		return -1;
 	}
 
 	// Read the number of test cases
 	fp = fopen( argv[1], "rt" );
 	if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	{
 		fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		return -1;
 	}
 
 	numCases = atoi( buffer );
 	if( numCases < 1 || numCases > 1000 )
 	{
 		fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
 		return -1;
 	}
 
 	// For each test cases...
 	for( i = 0 ; i < numCases ; i++ )
 	{
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 		num = atoi(buffer);
         if( num < 1 || num > 800 )
 		{
 			fprintf( stderr, "Error : Invalid number of Integers (%d)!\n", num );
 			return -1;
 		}
 
 		if( fgets( param1, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!(param1)\n" );
 			return -1;
 		}
 		if( fgets( param2, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!(param2)\n" );
 			return -1;
 		}
 
 		// Function call...
         min = calcMinSV( num, param1, param2 );
 		fprintf( stdout, "Case #%d: %ld\n", i+1, min );
 	}
 
 	fclose( fp );
 
 	return 0;
 }
 
 
 
 long    calcMinSV( int num, char *param1, char *param2 )
 {
     int     *v1, *v2, i, j, tmp;
     char    *idx1, *idx2;
     long    res;
 
     v1 = (int *)malloc( sizeof(int) * num );
     v2 = (int *)malloc( sizeof(int) * num );
 
     idx1 = param1, idx2 = param2;
     for( i = 0 ; i < num ; i++ )
     {
         sscanf( idx1, "%d", &v1[i] );
         sscanf( idx2, "%d", &v2[i] );
 
         idx1 = strstr( idx1, " " );
         idx2 = strstr( idx2, " " );
         idx1++, idx2++;
     }
 
     for( i = 0 ; i < num ; i++ )
     {
         for( j = i+1 ; j < num ; j++ )
         {
             if( v1[i] > v1[j] )
                 tmp = v1[j], v1[j] = v1[i], v1[i] = tmp;
             if( v2[i] > v2[j] )
                 tmp = v2[j], v2[j] = v2[i], v2[i] = tmp;
         }
     }
 
     res = 0;
     for( i = 0 ; i < num ; i++ )
         res += (long)v1[i]*v2[num-i-1];
 
     return res;
 }
 
 
 int main( int argc, char *argv[] )
 {
 	FILE	*fp;
 	int		numCases, num, i;
 	char	buffer[MAXCHAR];
 	STU		ss;
 
 	if( argc < 2 )
 	{
 		fprintf( stderr, "Error : No input file!\n" );
 		fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
 		return -1;
 	}
 
 	// Read the number of test cases
 	fp = fopen( argv[1], "rt" );
 	if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	{
 		fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		return -1;
 	}
 
 	numCases = atoi( buffer );
 	if( numCases < 1 || numCases > 20 )
 	{
 		fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
 		return -1;
 	}
 
 	// For each test cases...
 	for( i = 0 ; i < numCases ; i++ )
 	{
 		// Read the number of search engines.
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 		num = atoi(buffer);
 		if( num < 2 || num > MAXENGINE )
 		{
 			fprintf( stderr, "Error : Invaid number of search engines (%d)\n", num );
 			return -1;
 		}
 		ss.numEngines = num;
 
 		// Read each search engines...
 		for( num = 0 ; num < ss.numEngines ; num++ )
 		{
 			if( fgets( ss.eng[num], MAXCHAR, fp ) == NULL )
 			{
 				fprintf( stderr, "Error : fgets() returns NULL!\n" );
 				return -1;
 			}
 		}
 
 		// Read the number of Queries
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 		num = atoi(buffer);
 		if( num < 0 || num > MAXQUERY )
 		{
 			fprintf( stderr, "Error : Invaid number of queries (%d)\n", num );
 			return -1;
 		}
 		ss.numQueries = num;
 
 		for( num = 0 ; num < ss.numQueries ; num++ )
 		{
 			if( fgets( ss.query[num], MAXCHAR, fp ) == NULL )
 			{
 				fprintf( stderr, "Error : fgets() returns NULL!\n" );
 				return -1;
 			}
 		}
 
 		// Function call...
 		num = calcSwitching( &ss );
 		if( num < 0 )
 		{
 			fprintf( stderr, "Error : Invaid number of switching (%d)\n", num );
 			return -1;
 		}
 		fprintf( stdout, "Case #%d: %d\n", i+1, num );
 
 	}
 
 	fclose( fp );
 
 	return 0;
 }
 
 
 
 int	calcSwitching( pSTU s )
 {
 	int		engPool[MAXENGINE], engIndex, i, j;
 	int		switching = 0;
 
 	if( s->numQueries == 0 || s->numQueries == 1 )
 		return 0;
 
     memset( engPool, 0, sizeof(int)*MAXENGINE );
 	for( i = 0 ; i < s->numQueries ; i++ )
 	{
 		for( j = 0 ; j < s->numEngines ; j++ )
 		{
 			if( strcmp( s->query[i], s->eng[j] ) == 0 )
 				break;
 		}
 		if( j == s->numEngines )
 			continue;
 
 		engIndex = j;
 		engPool[engIndex] = -1;
 		for( j = 0 ; j < s->numEngines ; j++ )
 		{
 			if( engPool[j] == 0 )
 				break;
 		}
 		if( j == s->numEngines )
 		{
 			memset( engPool, 0, sizeof(int)*MAXENGINE );
 			engPool[engIndex] = -1;
 			switching++;
 		}
 	}
 
 	return switching;
 }
 
 
 
 int main( int argc, char *argv[] )
 {
 	FILE	*fp;
 	int		numCases, num, i;
     int     numA, numB;
 	char	buffer[MAXCHAR];
 	TTS		tts;
 
 	if( argc < 2 )
 	{
 		fprintf( stderr, "Error : No input file!\n" );
 		fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
 		return -1;
 	}
 
 	// Read the number of test cases
 	fp = fopen( argv[1], "rt" );
 	if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	{
 		fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		return -1;
 	}
 
 	numCases = atoi( buffer );
 	if( numCases < 1 || numCases > 100 )
 	{
 		fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
 		return -1;
 	}
 
 	// For each test cases...
 	for( i = 0 ; i < numCases ; i++ )
 	{
 		// Read the turnaround time
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 		num = atoi(buffer);
 		if( num < 0 || num > MAXTU )
 		{
 			fprintf( stderr, "Error : Invaid turnaround time (%d)\n", num );
 			return -1;
 		}
         tts.tu_time = num;
 
 		// Read the NA NB
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
         if( sscanf( buffer, "%d %d", &tts.numA, &tts.numB ) != 2 ||
 			(tts.numA < 0 || tts.numA > MAXTRIPS || tts.numB < 0 || tts.numB > MAXTRIPS) )
 		{
 			fprintf( stderr, "Error : Invaid NA(%d)&NB(%d)\n", tts.numA, tts.numB );
 			return -1;
 		}
 
 		// Read each Trip Tables from A( to B)
 		for( num = 0 ; num < tts.numA ; num++ )
 		{
 			if( fgets( buffer, MAXCHAR, fp ) == NULL )
 			{
 				fprintf( stderr, "Error : fgets() returns NULL!\n" );
 				return -1;
 			}
             if( sscanf( buffer, "%s %s", tts.startA[num], tts.endA[num] ) != 2 )
 			{
 				fprintf( stderr, "Error : Invaid trip time(A-B)\n" );
 				return -1;
 			}
             if( strcmp(tts.startA[num], tts.endA[num]) >= 0 )
 			{
 				fprintf( stderr, "Error : Invaid trip time(%s-%s)\n", tts.startA[num], tts.endA[num] );
 				return -1;
 			}
 		}
 
 		// Read each Trip Tables from B( to A)
 		for( num = 0 ; num < tts.numB ; num++ )
 		{
 			if( fgets( buffer, MAXCHAR, fp ) == NULL )
 			{
 				fprintf( stderr, "Error : fgets() returns NULL!\n" );
 				return -1;
 			}
             if( sscanf( buffer, "%s %s", tts.startB[num], tts.endB[num] ) != 2 )
 			{
 				fprintf( stderr, "Error : Invaid trip time(B-A)\n" );
 				return -1;
 			}
             if( strcmp(tts.startB[num], tts.endB[num]) >= 0 )
 			{
 				fprintf( stderr, "Error : Invaid trip time(%s-%s)\n", tts.startB[num], tts.endB[num] );
 				return -1;
 			}
 		}
 
 		// Function call...
 		if( (num=calcStartNum( &tts, &numA, &numB )) < 0 )
 		{
 			fprintf( stderr, "Error : Invaid Calculation Result!(%d)\n", num );
 			return -1;
 		}
 		fprintf( stdout, "Case #%d: %d %d\n", i+1, numA, numB );
 	}
 
 	fclose( fp );
 
 	return 0;
 }
 
 
 
 int	calcStartNum( pTTS ts, int *numA, int *numB )
 {
     int     A, B, i, j;
     char    s[6], e[6];
     int     usedFlag[MAXTRIPS];
     struct  tm  tt;
 
     A = ts->numA;
     B = ts->numB;
 
     // For optimaization, sorting the timetable for A-B
     for( i = 0 ; i < ts->numA ; i++ )
     {
         for( j = i+1 ; j < ts->numA ; j++ )
         {
             if( strcmp(ts->startA[i], ts->startA[j]) > 0 )
             {
                 strcpy( s, ts->startA[j] );
                 strcpy( e, ts->endA[j] );
                 strcpy( ts->startA[j], ts->startA[i] );
                 strcpy( ts->endA[j], ts->endA[i] );
                 strcpy( ts->startA[i], s );
                 strcpy( ts->endA[i], e );
             }
         }
     }
     // For optimaization, sorting the timetable for B-A
     for( i = 0 ; i < ts->numB ; i++ )
     {
         for( j = i+1 ; j < ts->numB ; j++ )
         {
             if( strcmp(ts->startB[i], ts->startB[j]) > 0 )
             {
                 strcpy( s, ts->startB[j] );
                 strcpy( e, ts->endB[j] );
                 strcpy( ts->startB[j], ts->startB[i] );
                 strcpy( ts->endB[j], ts->endB[i] );
                 strcpy( ts->startB[i], s );
                 strcpy( ts->endB[i], e );
             }
         }
     }
 
     memset( usedFlag, 0, sizeof(int)*MAXTRIPS );
     for( i = 0 ; i < ts->numA ; i++ )
     {
         for( j = 0 ; j < ts->numB ; j++ )
         {
             if( usedFlag[j] == 0 )
             {
                 sscanf( ts->endB[j], "%d:%d", &tt.tm_hour, &tt.tm_min );
                 tt.tm_min += ts->tu_time;
                 if( tt.tm_min >= 60 )
                 {
                     tt.tm_hour++;
                     tt.tm_min -= 60;
                 }
                 sprintf( e, "%02d:%02d", tt.tm_hour, tt.tm_min );
                 if( strcmp( e, ts->startA[i] ) <= 0 )
                 {
                     usedFlag[j] = 1;
                     A--;
                     break;
                 }
             }
         }
     }
 
     memset( usedFlag, 0, sizeof(int)*MAXTRIPS );
     for( i = 0 ; i < ts->numB ; i++ )
     {
         for( j = 0 ; j < ts->numA ; j++ )
         {
             if( usedFlag[j] == 0 && ts->endA[j]+ts->tu_time <= ts->startB[i] )
             {
                 sscanf( ts->endA[j], "%d:%d", &tt.tm_hour, &tt.tm_min );
                 tt.tm_min += ts->tu_time;
                 if( tt.tm_min >= 60 )
                 {
                     tt.tm_hour++;
                     tt.tm_min -= 60;
                 }
                 sprintf( e, "%02d:%02d", tt.tm_hour, tt.tm_min );
                 if( strcmp( e, ts->startB[i] ) <= 0 )
                 {
                     usedFlag[j] = 1;
                     B--;
                     break;
                 }
             }
         }
     }
 
     *numA = A;
     *numB = B;
 
     return 0;
 }
 
 int main( int argc, char *argv[] )
 {
     FILE    *fp;
     char    *idx;
     int     numCases, num, i, j, k;
     int     P, K, L;
 
     if( argc < 2 )
     {
         fprintf( stderr, "Error : No input file!\n" );
         fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
         return -1;
     }
 
     // Read the number of test cases
     fp = fopen( argv[1], "rt" );
     if( fgets( buffer, MAXCHAR, fp ) == NULL )
     {
         fprintf( stderr, "Error : fgets() returns NULL!\n" );
         return -1;
     }
 
     numCases = atoi( buffer );
     if( numCases < 1 || numCases > MAXTC )
     {
         fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
         return -1;
     }
 
     // For each test cases...
     for( i = 0 ; i < numCases ; i++ )
     {
         int   temp, push;
         long long   total;
 
         memset( freq, 0, sizeof(int)*MAXALPHA );
 
         if( fgets( buffer, MAXCHAR, fp ) == NULL )
         {
             fprintf( stderr, "Error : fgets() returns NULL!\n" );
             return -1;
         }
         sscanf( buffer, "%d %d %d", &P, &K, &L );
 
         if( fgets( buffer, MAXCHAR, fp ) == NULL )
         {
             fprintf( stderr, "Error : fgets() returns NULL!\n" );
             return -1;
         }
         idx = buffer;
         for( j = 0 ; j < L ; j++ )
         {
             int     f;
             sscanf( idx, "%d", &f );
             freq[j] = f;
             idx = strstr( idx, " " );
             idx++;
         }
 
         for( j = 0 ; j < L ; j++ )
         {
             for( k = j+1 ; k < L ; k++ )
             {
                 if( freq[j] < freq[k] )
                 {
                     temp = freq[j];
                     freq[j] = freq[k];
                     freq[k] = temp;
                 }
             }
         }
 
         total = 0;
         for( j = 0 ; j < L ; j += K )
         {
             push = (j / K)+1;
             for( k = 0 ; k < K ; k++ )
                 total += (long long)freq[j+k]*push;
         }
 
         fprintf( stdout, "Case #%d: %I64d\n", i+1, total );
     }
 
     fclose( fp );
 
     return 0;
 }
 
 int main( int argc, char *argv[] )
 {
     FILE    *fp;
     char    *idx;
     int     numCases, num, i, j, k;
     int     P, K, L;
 
     if( argc < 2 )
     {
         fprintf( stderr, "Error : No input file!\n" );
         fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
         return -1;
     }
 
     // Read the number of test cases
     fp = fopen( argv[1], "rt" );
     if( fgets( buffer, MAXCHAR, fp ) == NULL )
     {
         fprintf( stderr, "Error : fgets() returns NULL!\n" );
         return -1;
     }
 
     numCases = atoi( buffer );
     if( numCases < 1 || numCases > MAXTC )
     {
         fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
         return -1;
     }
 
     // For each test cases...
     for( i = 0 ; i < numCases ; i++ )
     {
         int   temp, push;
         long long   total;
 
         memset( freq, 0, sizeof(int)*MAXALPHA );
 
         if( fgets( buffer, MAXCHAR, fp ) == NULL )
         {
             fprintf( stderr, "Error : fgets() returns NULL!\n" );
             return -1;
         }
         sscanf( buffer, "%d %d %d", &P, &K, &L );
 
         if( fgets( buffer, MAXCHAR, fp ) == NULL )
         {
             fprintf( stderr, "Error : fgets() returns NULL!\n" );
             return -1;
         }
         idx = buffer;
         for( j = 0 ; j < L ; j++ )
         {
             int     f;
             sscanf( idx, "%d", &f );
             freq[j] = f;
             idx = strstr( idx, " " );
             idx++;
         }
 
         for( j = 0 ; j < L ; j++ )
         {
             for( k = j+1 ; k < L ; k++ )
             {
                 if( freq[j] < freq[k] )
                 {
                     temp = freq[j];
                     freq[j] = freq[k];
                     freq[k] = temp;
                 }
             }
         }
 
         total = 0;
         for( j = 0 ; j < L ; j += K )
         {
             push = (j / K)+1;
             for( k = 0 ; k < K ; k++ )
                 total += (long long)freq[j+k]*push;
         }
 
         fprintf( stdout, "Case #%d: %ld\n", i+1, total );
     }
 
     fclose( fp );
 
     return 0;
 }
 
 
 int main( int argc, char *argv[] )
 {
 	FILE    *fp;
 	char    buffer[MAXCHAR];
 	int     numCases = 0;
 	int     i, j, k;
     char    *ptr;
 
 	if( argc < 2 )
 	{
 		fprintf( stderr, "Error : No input file!\n" );
 		fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
 		return -1;
 	}
 
 	// Read the number of test cases
 	fp = fopen( argv[1], "rt" );
 	if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	{
 		fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		return -1;
 	}
     if( sscanf(buffer, "%d", &numCases) < 1 )
     {
 		fprintf( stderr, "Error : Invaid number of parameters (%d)\n", numCases );
 		return -1;
     }
 	if( numCases > MAXTC )
 	{
 		fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
 		return -1;
 	}
 
 	// For each test cases...
 	for( i = 0 ; i < numCases ; i++ )
 	{
 	    if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	    {
 		    fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		    return -1;
 	    }
         if( sscanf(buffer, "%d %d", &height, &width) < 2 )
         {
 		    fprintf( stderr, "Error : Invaid number of parameters (%d)\n", numCases );
 		    return -1;
         }
 
         clear_map();
 
         for( j = 0 ; j < height ; j++ )
         {
 	        if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	        {
 		        fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		        return -1;
 	        }
             ptr = buffer;
             for( k = 0 ; k < width ; k++ )
             {
                 if( sscanf(ptr, "%d", &map[j][k].altitude) < 1 )
                 {
 		            fprintf( stderr, "Error : Invaid number of parameters (%d)\n", numCases );
 		            return -1;
                 }
                 ptr = strchr( ptr, ' ' );
                 ptr++;
             }
         }
 
         calc_map();
 
 		fprintf( stdout, "Case #%d:\n", i+1 );
         for( j = 0 ; j < height ; j++ )
         {
             for( k = 0 ; k < width ; k++ )
             {
                 if( k == width-1 )
                     fprintf( stdout, "%c\n", map[j][k].symbol );
                 else
                     fprintf( stdout, "%c ", map[j][k].symbol );
             }
         }
 	}
 
 	fclose( fp );
 
 	return 0;
 }
 
 
 
 void    clear_map()
 {
     int i, j;
 
     for( i = 0 ; i < MAXHEIGHT ; i++ )
     {
         for( j = 0 ; j < MAXWIDTH ; j++ )
         {
             map[i][j].altitude = 0;
             map[i][j].flow_to = NONE;
             map[i][j].isSink = 0;
             map[i][j].symbol = 0;
         }
     }
 }
 
 
 
 void    calc_map()
 {
     int i, j, min;
     int alt[5];
     char    ch = 'a';
 
     for( i = 0 ; i < height ; i++ )
     {
         for( j = 0 ; j < width ; j++ )
         {
             alt[0] = i>0 ? map[i-1][j].altitude : 10000;  // NORTH
             alt[1] = j>0 ? map[i][j-1].altitude : 10000;  // WEST
             alt[2] = j<width-1 ? map[i][j+1].altitude : 10000;  // EAST
             alt[3] = i < height-1 ? map[i+1][j].altitude : 10000;  // SOUTH
             alt[4] = map[i][j].altitude;    // self
 
             min = get_min( alt );
             if( min == 4 )
             {
                 map[i][j].flow_to = NONE;
                 map[i][j].isSink = 1;
             }
             else
             {
                 map[i][j].flow_to = min+1;
                 map[i][j].isSink = 0;
             }
         }
     }
 
     do {
         for( i = 0 ; i < height ; i++ )
         {
             for( j = 0 ; j < width ; j++ )
             {
                 if( map[i][j].symbol == 0 )
                 {
                     map[i][j].symbol = ch;
                     break;
                 }
             }
             if( j < width )
                 break;
         }
         if( i == height && j == width )
             break;
 
         allocate_symbol( i, j, ch++ );
     } while( ch <= 'z' );
 
     return;
 }
 
 
 
 int get_min( int nums[] )
 {
     int i, index, min;
 
     index = 4;
     min = nums[4];
     for( i = 0 ; i < 4 ; i++ )
     {
         if( nums[i] < min )
         {
             min = nums[i];
             index = i;
         }
     }
 
     return index;
 }
 
 
 
 void    allocate_symbol( int row, int col, char symbol )
 {
     // Flow to ~
     if( map[row][col].flow_to )
     {
         switch( map[row][col].flow_to )
         {
             case NORTH :
                 if( map[row-1][col].symbol != symbol )
                 {
                     map[row-1][col].symbol = symbol;
                     allocate_symbol( row-1, col, symbol );
                 }
                 break;
 
             case WEST :
                 if( map[row][col-1].symbol != symbol )
                 {
                     map[row][col-1].symbol = symbol;
                     allocate_symbol( row, col-1, symbol );
                 }
                 break;
 
             case EAST :
                 if( map[row][col+1].symbol != symbol )
                 {
                     map[row][col+1].symbol = symbol;
                     allocate_symbol( row, col+1, symbol );
                 }
                 break;
 
             case SOUTH :
                 if( map[row+1][col].symbol != symbol )
                 {
                     map[row+1][col].symbol = symbol;
                     allocate_symbol( row+1, col, symbol );
                 }
                 break;
         }
     }
 
     // Flow from ~
     // NORTH
     if( row > 0 && map[row-1][col].flow_to == SOUTH && map[row-1][col].symbol != symbol )
     {
         map[row-1][col].symbol = symbol;
         allocate_symbol( row-1, col, symbol );
     }
     // WEST
     if( col > 0 && map[row][col-1].flow_to == EAST && map[row][col-1].symbol != symbol )
     {
         map[row][col-1].symbol = symbol;
         allocate_symbol( row, col-1, symbol );
     }
     // EAST
     if( col < width-1 && map[row][col+1].flow_to == WEST && map[row][col+1].symbol != symbol )
     {
         map[row][col+1].symbol = symbol;
         allocate_symbol( row, col+1, symbol );
     }
     // SOUTH
     if( row < height-1 && map[row+1][col].flow_to == NORTH && map[row+1][col].symbol != symbol )
     {
         map[row+1][col].symbol = symbol;
         allocate_symbol( row+1, col, symbol );
     }
 
     return;
 }
 
 
 int main( int argc, char *argv[] )
 {
 	FILE    *fp;
 	char    buffer[MAXCHAR];
 	int     numCases = 0;
 	int     i, num;
 
 	if( argc < 2 )
 	{
 		fprintf( stderr, "Error : No input file!\n" );
 		fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
 		return -1;
 	}
 
 	// Read the number of test cases
 	fp = fopen( argv[1], "rt" );
 	if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	{
 		fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		return -1;
 	}
 
     if( sscanf(buffer, "%d", &numCases) < 1 )
     {
 		fprintf( stderr, "Error : Invaid number of parameters (%d)\n", numCases );
 		return -1;
     }
 	if( numCases > MAXTC )
 	{
 		fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
 		return -1;
 	}
 
 	// For each test cases...
 	for( i = 0 ; i < numCases ; i++ )
 	{
 		// Read the number of search engines.
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 
 		num = searchWTCJ( buffer );
 		fprintf( stdout, "Case #%d: %04d\n", i+1, num%10000 );
 	}
 
 	fclose( fp );
 
 	return 0;
 }
 
 
 
 int searchWTCJ( char *str )
 {
     if( str[strlen(str)-1] == '\n' )
         str[strlen(str)-1] = 0;
     return search( str, &WTCJ[0] );
 }
 
 
 int search( char *text, char *find )
 {
     int     num = 0;
     char    *ptr = text;
 
     while( *ptr )
     {
         ptr = strchr( ptr, find[0] );
         if( !ptr )
             return num;
         /* ãƾ   ڿµ, ؽƮ   .... ؽƮ ִ   ŭ Ī Ǵ ̴. */
         if( find[1] == 0 && ptr[1] != 0 )
         {
             num++;
             for( ptr++ ; *ptr ; ptr++ )
             {
                 if( ptr = strchr( ptr, find[0] ) )
                     num++;
                 else
                     break;
             }
             return num;
         }
         /* ãƾ   ڿµ, ؽƮ   . 1 Ī . */
         if( find[1] == 0 && ptr[1] == 0 )
             return num+1;
         /* ãƾ  ڰ , ؽƮ  .  ̻ ãƵ Ī   */
         if( ptr[1] == 0 )
             return num;
         num += search( &ptr[1], &find[1] );
         ptr++;
     }
 
     return num;
 }
 
 
 int main( int argc, char *argv[] )
 {
 	FILE    *fp;
 	char    buffer[MAXCHAR];
 	int     numCases = 0;
 	int     wordLen=0, numDic=0;
 	int     i, num;
 
 	if( argc < 2 )
 	{
 		fprintf( stderr, "Error : No input file!\n" );
 		fprintf( stderr, "Usage : %s input_file [> output_file]\n", argv[0] );
 		return -1;
 	}
 
 	// Read the number of test cases
 	fp = fopen( argv[1], "rt" );
 	if( fgets( buffer, MAXCHAR, fp ) == NULL )
 	{
 		fprintf( stderr, "Error : fgets() returns NULL!\n" );
 		return -1;
 	}
 
     if( sscanf(buffer, "%d %d %d", &wordLen, &numDic, &numCases) < 3 )
     {
 		fprintf( stderr, "Error : Invaid number of parameters (%d %d %d)\n", wordLen, numDic, numCases );
 		return -1;
     }
 	if( numCases > MAXTC )
 	{
 		fprintf( stderr, "Error : Invaid number of test cases (%d)\n", numCases );
 		return -1;
 	}
 	if( wordLen > MAXWORD || numDic > MAXDIC )
 	{
 		fprintf( stderr, "Error : Invaid number of parameters (%d %d)\n", wordLen, numDic );
 		return -1;
 	}
 
     initDic();
 
     for( i = 0 ; i < numDic ; i++ )
     {
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 		addDic( buffer );
     }
 
 	// For each test cases...
 	for( i = 0 ; i < numCases ; i++ )
 	{
 		// Read the number of search engines.
 		if( fgets( buffer, MAXCHAR, fp ) == NULL )
 		{
 			fprintf( stderr, "Error : fgets() returns NULL!\n" );
 			return -1;
 		}
 
 		num = searchDic( buffer );
 		fprintf( stdout, "Case #%d: %d\n", i+1, num );
 	}
 
 	fclose( fp );
 
     deleteDic();
 
 	return 0;
 }
 
 
 
 void    initDic()
 {
     int i;
 
     for( i = 0 ; i < MAXLETTER ; i++ )
         Dic.child[i] = NULL;
 }
 
 
 void    deleteDic()
 {
     int i;
 
     for( i = 0 ; i < MAXLETTER ; i++ )
     {
         if( Dic.child[i] )
             freeDic( Dic.child[i] );
     }
 }
 
 
 void    freeDic( DIC *d )
 {
     int i;
 
     if( d )
     {
         for( i = 0 ; i < MAXLETTER ; i++ )
         {
             if( d->child[i] )
                 freeDic( d->child[i] );
         }
 
         free(d);
     }
 }
 
 
 int addDic( char *str )
 {
     int     i;
     char    ch;
     DIC     *d = NULL, *child;
 
     d = &Dic;
     while( *str >= 'a' && *str <= 'z')
     {
         ch = *str++;
         if( d->child[ch-'a'] == NULL )
         {
             child = (DIC *)malloc( sizeof(DIC) );
             for( i = 0 ; i < MAXLETTER ; i++ )
                 child->child[i] = NULL;
             d->child[ch-'a'] = child;
             d = child;
         }
         else
             d = d->child[ch-'a'];
     }
 
     return 1;
 }
 
 
 int searchDic( char *str )
 {
     if( str[strlen(str)-1] )
         str[strlen(str)-1] = 0;
 
     return search( &Dic, str );
 }
 
 
 int search( DIC *d, char *str )
 {
     char    *ptr;
     int     num = 0;
 
     if( !d )
         return 0;
     if( str[0] == '(' )
     {
         ptr = strstr( str, ")" );
         for( str++ ; str < ptr ; str++ )
         {
             if( ptr[1] )
                 num += search( d->child[str[0]-'a'], ptr+1 );
             else if( d->child[str[0]-'a'] )
                 num++;
         }
         return num;
     }
     else if( str[1] )
         return search( d->child[str[0]-'a'], str+1 );
     else if( d->child[str[0]-'a'] )
         return 1;
 
     return 0;
 }
 
 int main()
 {
 	char    buffer[MAXCHAR];
 	int     numCases = 0, i, j, k;
     double  x, y, z, d, d_min, bb;
     int     t, t_min;
 
     scanf( "%d", &numCases);
 
     for( i = 0 ; i < numCases ; i++ )
     {
         scanf( "%d", &N );
 
         for( j = 0 ; j < N ; j++ )
         {
             scanf( "%d %d %d %d %d %d\n", &ff[j].x, &ff[j].y, &ff[j].z, &ff[j].vx, &ff[j].vy, &ff[j].vz );
             ff[j].lx = (long long)ff[j].x;
             ff[j].ly = (long long)ff[j].y;
             ff[j].lz = (long long)ff[j].z;
         }
 
         for( t = 0 ; t < 1483648 ; t++ )
         {
             x=y=z=0.0;
             for( j = 0 ; j < N ; j++ )
                 x+=ff[j].lx, y+=ff[j].ly, z+=ff[j].lz;
             x /= N, y /= N, z /= N;
             bb = x*x + y*y + z*z;
             d = sqrt( bb );
             if( t==0 )
                 d_min = d, t_min = t;
             else if( d > d_min )
                 break;
             if( d < d_min )
             {
                 d_min = d;
                 t_min = t;
             }
             for( j = 0 ; j < N ; j++ )
             {
                 ff[j].lx+=ff[j].vx;
                 ff[j].ly+=ff[j].vy;
                 ff[j].lz+=ff[j].vz;
             }
         }
 
         printf( "Case #%d: %f %f\n", i+1, d_min, (float)t_min );
     }
 
 	return 1;
 }
 
 int main()
 {
 	char    buffer[MAXCHAR];
 	int     numCases = 0, i, j, k;
     char    *ptr;
     long long   seconds, b;
 
     for( i = 0 ; i < 36 ; i++ )
         value[i] = i;
     value[0] = 1, value[1] = 0;
 
     scanf( "%d", &numCases);
 
     for( i = 0 ; i < numCases ; i++ )
     {
         scanf( "%s", buffer );
         base = 0;
         ptr = buffer;
         while( (*ptr >= '0' && *ptr <= '9') || (*ptr >= 'a' && *ptr <= 'z') )
         {
             for( j = 0 ; j < base ; j++ )
                 if( numbers[j] == *ptr )
                     break;
             if( j == base )
                 numbers[base++] = *ptr;
             *ptr++;
         }
         if( base <= 1 )
             base = 2;
 
         seconds = 0;
         b = 1;
         for( j = strlen(buffer)-1 ; j >= 0 ; j-- )
         {
             for( k = 0 ; k < base ; k++ )
                 if( numbers[k] == buffer[j] )
                     break;
             seconds += value[k]*b;
             b = b*base;
         }
 
         printf( "Case #%d: %ld\n", i+1, seconds );
     }
 
 	return 1;
 }
 
 int main()
 {
     int     t, r, k, n;
     int     g[1000];
     int     i, j;
     long    euro;
 
     scanf( "%d", &t );
     for( i = 1 ; i <= t ; i++ )
     {
         memset( g, 0, sizeof(int)*1000 );
         scanf( "%d %d %d", &r, &k, &n );
         for( j = 0 ; j < n ; j++ )
             scanf( "%d", &g[j] );
 /*
         printf( "%d %d %d\n", r, k, n );
         for( j = 0 ; j < n ; j++ )
             printf( "%d ", g[j] );
         printf( "\n" );
 */
         if( n == 0 || k == 0 )
             euro = 0L;
         else
             euro = rollercoaster( r, k, n, g );
 
         printf( "Case #%d: %ld\n", i, euro );
     }
     return 0;
 }
 
 
 
 long rollercoaster( int r, int k, int n, int g[] )
 {
     int     sidx = 0, eidx = 0, passengers;
     long    euro = 0L;
 
     while( r-- )
     {
         passengers = 0;
         while( passengers + g[eidx] <= k )
         {
             passengers += g[eidx];
             euro += g[eidx++];
             if( eidx >= n )
                 eidx = 0;
             if( eidx == sidx )
                 break;
         }
         sidx = eidx;
     }
 
     return euro;
 }
 
 int main()
 {
     int     t, n, k;
     int     i, j, state;
 
     for( i = 0 ; i <= 10 ; i++ )
     {
         for( j = 0 ; j <= 100 ; j++ )
         {
             if( i == 0 )
                 sstate[i][j] = 1;
             else if( i > j )
                 sstate[i][j] = 0;
             else
                 sstate[i][j] = -1;
         }
     }
 
     scanf( "%d", &t );
     for( i = 1 ; i <= t ; i++ )
     {
         scanf( "%d %d", &n, &k );
 
 /*
         P( 1, k ) = 1
         S( 1, 0 ) = 0
         S( n, k ) = S( n-1, k-1) ^ S( n, k-1 )
         P( n, k ) = S( n-1, k )
 
         S( n, k ) = P( n, k-1 ) ^ S( n, k-1 )
         S( 1, k ) = 1 ^ S( n, k-1 ) = k%2
 
         S( n, k ) = Sum( P(n, 0) ~ P(n, k-1) ) % 2
 */
         state = snapper_state( n, k );
 
         printf( "Case #%d: %s\n", i, (state==0 ? "OFF":"ON") );
     }
     return 0;
 }
 
 
 int snapper_state( int n, int k )
 {
     int state = 0;
     int     i;
 
     if( sstate[n][k] != -1 )
         return sstate[n][k];
 
     for( i = 0 ; i < k ; i++ )
         state += snapper_state( n-1, i );
 
     sstate[n][k] = state%2;
 
     return state;
 }
 
 int main()
 {
     int     T, N, t, n, c;
     int     xor_sum, sum, min;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         xor_sum = sum = 0;
         min = 1000000;
 
         scanf( "%d\n", &N );
         for( n = 0 ; n < N ; n++ )
         {
             scanf( "%d ", &c );
 
             xor_sum ^= c;
             sum += c;
             if( c < min )
                 min = c;
         }
 
         if( xor_sum )
         {
             printf( "Case #%d: NO\n", t );
             continue;
         }
 
         printf( "Case #%d: %d\n", t, sum-min );
     }
 
     return 0;
 }
 
 int main()
 {
     int T, N, t, n;
     int period, OPrd, BPrd, OPos, BPos;
     char color;
     int pos;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         period = 0;
         OPrd = BPrd = 0;
         OPos = BPos = 1;
 
         scanf( "%d ", &N );
         for( n = 0 ; n < N ; n++ )
         {
             scanf( "%c %d ", &color, &pos );
             if( color == 'O' )
             {
                 OPrd += abs( pos - OPos );
                 if( period > OPrd )
                     OPrd = period;
                 OPrd++;
                 OPos = pos;
 
                 period = OPrd;
             }
             else
             {
                 BPrd += abs( pos - BPos );
                 if( period > BPrd )
                     BPrd = period;
                 BPrd++;
                 BPos = pos;
 
                 period = BPrd;
             }
         }
 
         printf( "Case #%d: %d\n", t, period );
     }
 
     return 0;
 }
 
 int main()
 {
     int     T, N, t, n;
     int     arr[1001];
     int     c, idx, tmp, chain, i;
     double  hit, hit2;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         hit = 0.0;
 
         scanf( "%d\n", &N );
         for( n = 1 ; n <= N ; n++ )
         {
             scanf( "%d ", &c );
             arr[n] = c;
         }
 
         for( idx = 1 ; idx <= N ; idx++ )
         {
             chain = 0;
             c = idx;
             while( arr[c] != c && c <= N )
             {
                 chain++;
                 tmp = arr[c];
                 arr[c] = c;
                 c = tmp;
             }
             if( chain >= 2 )
             {
                 hit2 = 1;
                 for( i = 0 ; i < chain ; i++ )
                     hit2 *= (i+1);
                 hit += hit2;
                 //hit += (chain*(chain+1)/2)-1;
             }
         }
 
         printf( "Case #%d: %f\n", t, hit );
     }
 
     return 0;
 }
 
 int main()
 {
     int     T, C, D, N, t, c, d, n;
     char    cmb[36][4], opp[28][4];
     char    list[100], e, e1;
     int     idx, i;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         idx = 0;
 
         scanf( "%d ", &C );
         for( c = 0 ; c < C ; c++ )
             scanf( "%s ", cmb[c] );
 
         scanf( "%d ", &D );
         for( d = 0 ; d < D ; d++ )
             scanf( "%s ", opp[d] );
 
         scanf( "%d ", &N );
         for( n = 0 ; n < N ; n++ )
         {
             scanf( "%c", &e );
 
             if( !idx )
             {
                 list[idx++] = e;
                 continue;
             }
 
             for( i = 0 ; i < C ; i++ )
             {
                 if( cmb[i][0] == e && list[idx-1] == cmb[i][1] )
                 {
                     list[idx-1] = cmb[i][2];
                     break;
                 }
                 if( cmb[i][1] == e && list[idx-1] == cmb[i][0] )
                 {
                     list[idx-1] = cmb[i][2];
                     break;
                 }
             }
             if( i < C )
                 continue;
 
 
             for( i = 0 ; i < D ; i++ )
             {
                 if( opp[i][0] == e )
                 {
                     e1 = opp[i][1];
                     break;
                 }
                 if( opp[i][1] == e )
                 {
                     e1 = opp[i][0];
                     break;
                 }
             }
             if( i < D )
             {
                 for( i = 0 ; i < idx ; i++ )
                 {
                     if( list[i] == e1 )
                     {
                         idx = 0;
                         break;
                     }
                 }
                 if ( !idx )
                     continue;
             }
 
 
             list[idx++] = e;
         }
 
         printf( "Case #%d: [", t );
         if( idx )
         {
             for( i = 0 ; i < idx-1 ; i++ )
                 printf( "%c, ", list[i] );
             printf( "%c]\n", list[idx-1] );
         }
         else
             printf( "]\n" );
     }
 
     return 0;
 }
 
 int main( int argc, char *argv[] )
 {
     FILE    *fp;
     int T, R, C, t, r, c;
     char    tile[50][51];
     int     impossible;
 
     fp = fopen( argv[1], "rt" );
 
     fscanf( fp, "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         for( r = 0 ; r < 50 ; r++ )
             memset( tile[r], 0, sizeof(char)*50 );
         impossible = 0;
 
         fscanf( fp, "%d %d\n", &R, &C );
         for( r = 0 ; r < R ; r++ )
         {
 /*
             for( c = 0 ; c < C ; c++ )
             {
                 fscanf( fp, "%c", &tile[r][c] );
             }
 */
             fgets( tile[r], 51, fp );
         }
 
         for( r = 0 ; r < R ; r++ )
         {
             for( c = 0 ; c < C ; )
             {
                 if( tile[r][c] == '#' )
                 {
                     if( tile[r][c+1] == '#' && tile[r+1][c] =='#' && tile[r+1][c+1] == '#' )
                     {
                         tile[r][c] = '/';
                         tile[r][c+1] = '\\';
                         tile[r+1][c] = '\\';
                         tile[r+1][c+1] = '/';
                         c += 2;
                     }
                     else
                     {
                         impossible = 1;
                         break;
                     }
                 }
                 else
                     c++;
             }
             if( impossible )
                 break;
         }
 
         printf( "Case #%d:\n", t );
         if( impossible )
             printf( "Impossible\n" );
         else
         {
             for( r = 0 ; r < R ; r++ )
             {
                 for( c = 0 ; c < C ; c++ )
                     printf( "%c", tile[r][c] );
                 printf( "\n" );
             }
         }
     }
 
     fclose( fp );
 
     return 0;
 }
 
 int main( int argc, char *argv[] )
 {
     FILE    *fp;
     int T, N, t, n;
     int i, j, k;
     long long L, H, temp, divider, harmony;
     long long f[10000];
 
     fp = fopen( argv[1], "rt" );
 
     fscanf( fp, "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         fscanf( fp, "%d %I64d %I64d\n", &N, &L, &H );
         for( n = 0 ; n < N ; n++ )
             fscanf( fp, "%I64d ", &f[n] );
 
         for( i = 0 ; i < N ; i++ )
         {
             for( j = i+1 ; j < N ; j++ )
             {
                 if( f[i] > f[j] )
                 {
                     temp = f[i];
                     f[i] = f[j];
                     f[j] = temp;
                 }
             }
         }
 
         for( i = 0 ; i < N ; i++ )
         {
             divider = f[i];
             if( divider == 1 )
                 continue;
             for( j = i+1 ; j < N ; j++ )
             {
                 if( f[j] % divider == 0 )
                 {
                     f[j] = f[j]/divider;
                     for( k = 0 ; k < j ; k++ )
                     {
                         if( f[j] == f[k] )
                         {
                             f[j] = 1;
                             break;
                         }
                     }
                 }
             }
         }
         harmony = 1;
         for( i = 0 ; i < N ; i++ )
             harmony *= f[i];
 
         if( harmony < L || harmony > H )
             printf( "Case #%d: NO\n", t  );
         else
             printf( "Case #%d: %I64d\n", t, harmony );
     }
 
     fclose( fp );
 
     return 0;
 }
 
 int main()
 {
     int T, t, L, n, value;
     int i, j, cons;
     char  name[MAXLEN];
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         scanf( "%s %d\n", name, &n );
         L = strlen( name );
 
         value = 0;
         for( i = 0 ; i <= L-n ; i++ )
         {
           for( j = i ; j <= L-n ; j++ )
           {
             for( cons = j ; cons < j+n ; cons++ )
             {
               if( IsVowel((name[cons])) )
                 break;
             }
             if( cons == j+n )
             {
               //value += (j-i+1)*(L-cons+1);
               value += (L-cons+1);
               break;
             }
           }
         }
 
         printf( "Case #%d: %d\n", t, value );
     }
 
     return 0;
 }
 
 int main( int argc, char *argv[] )
 {
     int     numTest;
     int     board[4][4];
     char    linebuf[5];
     int     t, i, j, result, flag;
 
     scanf( "%d", &numTest );
 
     for( t = 1 ; t <= numTest ; t++ )
     {
         // printf( "***** Test Case #%d : Begin\n", t );
         for( i = 0 ; i < 4 ; i++ )
         {
             // printf( "***** Line #%d : ", i );
             scanf( "%s", linebuf );
             for( j = 0 ; j < 4 ; j++ )
             {
                 switch( linebuf[j] )
                 {
                     case 'X' :
                         board[i][j] = 2;
                         break;
 
                     case 'O' :
                         board[i][j] = 3;
                         break;
 
                     case 'T' :
                         board[i][j] = 5;
                         break;
 
                     case '.' :
                     default :
                         board[i][j] = 0;
                 }
                 // printf( "%d", board[i][j] );
             }
             // printf( "\n" );
         }
 
         flag = 0, result = 2;
         for( i = 0 ; i < 10 ; i++ )
         {
             j = TEST( sets[i].row[0], sets[i].col[0], sets[i].row[1], sets[i].col[1],
                       sets[i].row[2], sets[i].col[2], sets[i].row[3], sets[i].col[3] );
             // printf( "TEST result of case #%d is %d\n", i, j );
             if( j == 16 || j == 40 )
             {
                 result = 0;
                 break;
             }
             if( j == 81 || j == 135 )
             {
                 result = 1;
                 break;
             }
             if( j == 0 )
                 flag = 1;
         }
         if( result == 2 && flag == 1 )
             result = 3;
 
         printf( "Case #%d: %s\n", t, out[result] );
     }
 
     return 0;
 }
 
 int main()
 {
     int     numTest;
     int     t, i, result;
     long long   A, B;
 
     scanf( "%d", &numTest );
 
     for( t = 1 ; t <= numTest ; t++ )
     {
         scanf( "%lld %lld", &A, &B );
         result = 0;
         for( i = 0 ; ; i++ )
         {
             if( square[i] == 0LL || square[i] > B )
                 break;
             if( square[i] >= A && square[i] <= B )
                 result++;
         }
 
         printf( "Case #%d: %d\n", t, result );
     }
 
     return 0;
 }
 
 int main()
 {
     int     numTest;
     int     t, i, j, result;
 
     scanf( "%d", &numTest );
 
     for( t = 1 ; t <= numTest ; t++ )
     {
         scanf( "%d %d", &N, &M );
         for( i = 0 ; i < N ; i++ )
         {
             for( j = 0 ; j < M ; j++ )
             {
                 scanf( "%d ", &lawn[i][j] );
             }
         }
 
         for( i = 0 ; i < N ; i++ )
         {
             for( j = 0 ; j < M ; j++ )
             {
                 result = check_possible( i, j );
                 if( !result )
                     break;
             }
             if( !result )
                 break;
         }
         printf( "Case #%d: %s\n", t, out[result] );
     }
 
     return 0;
 }
 
 
 
 int check_possible( int row, int col )
 {
     int i, j;
 
     for( i = 0 ; i < N ; i++ )
     {
         if( i == row )
             continue;
         if( lawn[i][col] > lawn[row][col] )
             break;
     }
     if( i == N )
         return 1;
 
     for( j = 0 ; j < M ; j++ )
     {
         if( j == col )
             continue;
         if( lawn[row][j] > lawn[row][col] )
             break;
     }
     if( j == M )
         return 1;
 
     return 0;
 }
 
 int main()
 {
     int T, t;
     long long N;
     int digit[20], len, i, j;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         scanf( "%lld\n", &N );
 
         len = 0;
         while( N > 0 )
         {
           digit[len++] = N%10;
           N = N / 10ll;
         }
         
         for( i = 1 ; i < len ; i++ )
         {
           if( digit[i-1] < digit[i] )
           {
             digit[i] -= 1;
             for( j = 0 ; j < i ; j++ )
               digit[j] = 9;
           }
         }
 
         N = 0ll;
         for( i = len-1 ; i >= 0 ; i-- )
           N = N * 10ll + (long long)digit[i];
 
         printf( "Case #%d: %lld\n", t, N );
     }
 
     return 0;
 }
 
 int main()
 {
     int T, t;
     int K, num, len, i, j;
     char S[1001];
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         scanf( "%s %d\n", S, &K );
 
         len = strlen(S);
         num = 0;
         for( i = 0 ; i < len-K+1 ; i++ )
         {
             if( S[i] == '-' )
             {
                 for( j = 0 ; j < K ; j++ )
                 {
                     if( S[i+j] == '-' )
                         S[i+j] = '+';
                     else
                         S[i+j] = '-';
                 }
                 num++;
             }
         }
 
         for( ; i < len ; i++ )
         {
             if( S[i] == '-' )
             {
                 num = -1;
                 break;
             }
         }
 
         if (num >=0)
             printf( "Case #%d: %d\n", t, num );
         else
             printf( "Case #%d: IMPOSSIBLE\n", t );
     }
 
     return 0;
 }
 
 int main()
 {
     int T, t;
     long long K, N, min, max, empty, groups, num_max;
     int depth, i;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         scanf( "%lld %lld\n", &N, &K );
 
         depth = log_2( K )+1;
 
         min = N;
         for( i = 0 ; i < depth-1 ; i++ )
             min = (min-1)/2;
 
         empty = N - pow_2(depth-1) + 1;
 
         groups = pow_2(depth-1);
 
         num_max = empty - groups*min;
         if( num_max )
             max = min + 1;
         else
             max = min;
 
         K -= pow_2(depth-1) - 1;
 
         if( K > num_max )
             N = min;
         else
             N = max;
 
         min = (N-1)/2;
         if( N%2 )
             max = min;
         else
             max = min+1;
 
         printf( "Case #%d: %lld %lld\n", t, max, min );
     }
 
     return 0;
 }
 
 int main()
 {
     int T, t;
     int D, N, n, P;
     double  S, time, max_time;
 
     scanf( "%d\n", &T );
     for( t = 1 ; t <= T ; t++ )
     {
         scanf( "%d %d\n", &D, &N );
 
         for( n = 0 ; n < N ; n++ )
         {
           scanf( "%d %lf\n", &P, &S );
           time = (D-P)/S;
           if( n == 0 )
             max_time = time;
           else
             if( time > max_time )
               max_time = time;
         }
 
         printf( "Case #%d: %lf\n", t, (double)(D/max_time) );
     }
 
     return 0;
 }
